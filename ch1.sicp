#lang sicp

;; The Structure and Interpretation of Computer Programs
;;  Chapter One: Building Abstractions with Procedures

;; "The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three: "
;; "1. Combining several simple ideas into one compound one, and thus all complex ideas are made."
;; "2. The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations."
;; "3. The third is by separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all general ideas are made."
;; John Locke, "An Essay Concerning Human Understanding" (1690)

;; * **Computational processes** are abstract beings that inhabit computers, which manipulate other abstract things called **data**, and are directed by a pattern of rules called a **program**.
;; * "In effect, we conjure the spirits of the computer with our spells."
;; * Programs are abstract and yet can perform real intellectual work, they are carefully composed from symbolic expressions in **programming languages**.
;; * Processes execute programs precisely and accurately, even small errors can have complex and unanticipated consequences.
;; * Real-world programming requires care, expertise, and wisdom. Even a small bug could lead to potential catastrophe.
;; * Master software engineers **organize** programs so as to have the best probability to perform as intended, **visualize** behavior of systems, and **debug** effectively.
;; * Well designed programs are designed in a modular manner so that parts can be constructed, replaced and debugged separately.

;; Programming in Lisp

;; * Invented in the 50's as a formalism for reasoning about the use of certain kinds of logical expressions called **recursion equations**, as a model for computation.
;; * Concieved by John McCarthy, based on his paper "Recursive Functions of Symbolic Expressions and Their Computation by Machine"(1960).
;; * The first Lisp interpreter was implemented by McCarthy with the help of collegues and students at the AI group at MIT.
;; * It's named is an acronym(sic?) for "LISTt Processing," revolutionary for its time in introducing new data objects known as atoms and lists.
;; * It is by now a family of dialects, this book uses one called Scheme.
;; It has a certain reputation for inefficiency, although it is less deserved now than it was.
;; The two major reasons for its selection as the medium for instruction in this book are that Lisp procedures can themselves be represented and manipulated as data, and that it is fun.


;; 1.1 The Elements of Programming ===

;; * A powerful programming language is also a framework for organizing our ideas about processes.
;; * We should pay particular attention to the means provided for combining simple ideas into complex ones.
;; * Every powerful language has three mechanisms for accomplishing this:
;;   1. Primitive expressions -- simple entities
;;   2. Means of Combination -- compound entities
;;   3. Means of Abstraction -- compound entites can be named and manipulated as units
;; * Generally, we deal with two kinds of elements, (not really so distinct,) which are procedures and data.


;; 1.1.1 Expressions ===

;; * In it's simplest form, you can become aquainted with Lisp through its REPL; type in an **expression**, the interpreter will **evaluate** it and display the result.
;; * Expressions can be combined with an expression representing a primitive procedure to form a compound expression that represents the application of the procedure to the numbers.
;; i.e simple numerical operations can be represented => (+ 137 349) etc.
;; * The left most expression representing the operation is called the **operator**, and the others are called **operands**.
;; * The convention of placing the operator to the left of the operands is called "prefix notation," ("infix notation" for '1 + 1' for example.)
;; * Prefix notation has two convenient properties, which are that they allow for a variadic number of operands without ambiguity, and that combinations can be nested also without any ambiguity.


;; 1.1.2 Naming and the Environment ===

;; * A critical aspect of programming languages is the means that it provides for naming objects.
;; * We say the name is the **variable** and the object is the **value**.
;; * In Scheme, this is done using "define."
;; * "define" is the languages simplest means of abstraction, as it allows for the use of names in place of compound operations.
;; * This is what allows for the construction of complex programs, through the successive name-object associations of progressively more complex objects constructed out of simple ones.
;; * The possibility of associating values with symbols means that the interpreter must maintain some sort of memory that keeps track of these pairs.
;; * This is called the **environment**.


;; 1.1.3  Evaluating Combinations ===

;; * Consider that the interpreter is following a certain procedure to evaluate expressions:
;;   1. Evaluate the subexpressions of the combination.
;;   2. Apply the procedure represented by the operator to the operands.
;; * This is recursive in nature given that it must invoke itself as one of its steps.
;; * "Notice how succinctly the idea of recursion can be used to express what, in the case of deeply nested combination, would otherwise be viewed as a rather complicated process."
;; * We can visualise this recursive process with a tree like structure, where branches are combinations, and leaves are primitive expressions.
;; * We can imagine that the values of operands percolate upward. This kind of "upwardly percolating" is called **tree accumulation**.
;; * When evaluating primitives, as opposed to combinations, we can take care of primitive cases by stipulating that:
;;   1. The values of the numerals are the numbers that they name.
;;   2. The values of the built-in operators are the machine instruction sequences that carry out the corresponding operations.
;;   3. The values of other names are the objects associated with those names in the environment.
;; * We may also regard the second rule as a special case of the third one by stipulating that symbols such as "*" are also stored in the global environment.
;; * These rules for evaluation does not apply to definitions.
;; * Evaluating (define x 3) does not apply define to two operands -- (define x 3) is not a combination.
;; Exceptions to the general rule are called "special forms," to its credit, Lisp only contains a few of these.


;; 1.1.4 Compound Procedures ===

;; * So far we have identified that in Lisp:
;;   1. Numbers and arithmetic operations are primitive data and procedures.
;;   2. Nesting of combinations provides a means for combining operations.
;;   3. Definitions that associate names with values provide a limited means of abstraction.
;; * Now we learn about **procedure definitions**, which is a much more powerful means of abstraction.
;; * A procedure definition is when a compound operation can be given a name and referred to as a unit.
;; e.g:

(define (square x) (* x x))

;; * It's general form is:
;; (define (<procedure name> <formal parameters>) (<procedure body>))
;; * The formal parameters are the names used withing the body to refer to the corresponding arguments applied at call-time, the body is an expression which will yield the value of the procedure application.
;; * These definitions can be used as building blocks to define other procedures,
;; e.g:

(define (sum-of-squares x y) (+ (square x) (square y)))

;; * Compound procedures are used in the exact same way as primitive ones.


;; 1.1.5 The Substitution Model for Procedure Application ===

;; * To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for primitive ones.
;; * While the application of procedures built-in to the interpreter is opaque, for procedures we define ourselves we can visualize the process as being one of substitution where the formal parameters are substituted for their respective applied arguments and then the evaluation continues in the same recursive pattern as with simple primitives.
;; * This process is called the **substitution model** for procedure application. Two things must be stressed:
;;   1. It's purpose is to provide a simple means to think about procedure application, not to provide a detailed, realistic description of interpreter operation. In practice, the "substitution" is accomplished by using a local environment for the formal parameters.
;;   2. Over the course of the book, there will be presented a series of increasingly elaborate models of how interpreters really work. In general, when modelling phenomena in science and engineering, one begins with simple and incomplete models and progress to more detailed ones as these begin to break down.

;; Applicative Order versus Normal Order

;; * According to the description of evaluation given in section 1.1.3, the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments.
;; * This is not the only way to perform evaluation -- an alternative would be to wait to evaluate operands until their values are needed.
;; This follows a more "fully expand and then reduce" approach.
;; Normal order is often slower if it involves redundant evaluations which could be avoided be applicative order, but may be faster if it avoids evaluating expressions that are never used.
;; If expressions are evaluated lazily, and redundant expressions are "shortcutted", and not executed, then it can also save programs from crashing and enountering errors from attempting to evaluate expressions that cause them.


;; 1.1.6 Conditional Expressions and Predicates ===

;; * So far the expressive power of our programmes have been limited by our inability to conduct "case analysis," that is, to make logical tests and perform different operations based on the result of that test.
;; * The construct used for this in Lisp is "cond."
;; * Its general form is: 

;; (cond 
;;     ((<predicate>) <consequent>)
;;     ((<predicate>) <consequent>)
;;     (else <alternative>))

;; * There is also the special form of "if", which is a restricted type of conditional for use where there are precisely two cases.
;; * Its general form is:

;; (if 
;;     (<predicate>)
;;     <consequent>
;;     <alternative>)

;; * Primitive predicates include >, =, <, and can be combined or manipulated using "and", "or", or "not" expressions.
;; * ! "and" and "or" are special forms that evaluate from left to right, and only evaluate subsequent expressions based on the evaluation of the preceding ones.

;; Exercise 1.1
;; What is the evaluated response to each expression?

; 10 -> 10
; (+ 5 3 4) -> 13
; (- 9 1) -> 8
; (/ 6 2) -> 3
; (+ (* 2 4) (- 4 6)) -> 6
; (define a 3) ->
; (define b (+ a 1)) ->
; (+ a b (* a b)) -> 19
; (= a b) -> #f
; (if (and (> b a) (< b (* a b))) b a) -> 4
; ...

;; Exercise 1.2
;; Translate the following to prefix

(/
    (+ 5 4 (- 2 3 
                (+ 6 (/ 4 5))))
    (* 3
        (- 6 2)
        (- 2 7)))

;; Exercise 1.3
;; Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

;; square and sum-of-squares are defined above.
(define (sum-of-squares-for-two-largest x y z)
    (let
        (
            (largest 
                (cond
                    ((and (>= x y) (>= x z)) x)
                    ((and (>= y x) (>= y z)) y)
                    ((and (>= z x) (>= z y)) z)))
            (second-largest
                (cond
                    (
                        (and 
                            (or (>= x y) (>= x z))
                            (or (<= x y) (<= x z)))
                        x)
                    (
                        (and
                            (or (>= y x) (>= y z))
                            (or (<= y x) (<= y z)))
                        y)
                    (
                        (and
                            (or (>= z x) (>= z y))
                            (or (>= z x) (<= z y)))
                        z))))
        (sum-of-squares largest second-largest)))

;; There has got to be an easier way of doing this... 

;(display (sum-of-squares-for-two-largest  3 3 4))
;(display "\n")

;; Exercise 1.4
;; Describe the behavior of the following:

(define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))

;; In this case the operator itself is the result of an expression. If b is positive it is added, if it's negatiive it is subtracted.

;; Exercise 1.5
;; A test whether the interpreter uses applicative or normal order evaluation:
(define (p) (p))

(define (test x y)
    (if (= x 0)
        0
        y))

; (test 0 (p))

;; Explain how this test works.

;; The procedure (p) is a recursive procedure with no exit. It will cause the program to loop indefinitely. If the interpreter uses normal order evaluation then it will not be evaluated until after the conditional in the body of test. "if" is a special form that will not evaluate the alternative if the predicate returns true, and so (p) will never be run.
;; On the otherhand, an interpreter using applicative order will attempt to evaluate (p) before passing it as an argument.



